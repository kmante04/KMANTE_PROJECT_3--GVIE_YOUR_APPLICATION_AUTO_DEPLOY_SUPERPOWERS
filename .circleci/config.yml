version: 2.1
orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID
    steps: 
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 ls
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
 
  notify_slack_error:
    description: Send alert notifications to slack when there is a job failure.
    steps:          
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: basic_success_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run: 
          name: Revert migrations
          working_directory: ./backend 
          when: on_fail 
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Y7Tx1uUb6z96Jg8jA6oWZ6/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
        
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend

  test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [test-backend]
        - run:
            name: backend test
            command: |
              cd backend
              npm install
              npm run test
        - save_cache:
            paths: [backend/node_modules]
            key: test-backend
  
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [scan-frontend]
        - run:
            name: front-end scan
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical # Do not use the --force option along with the command below in your local
              
               

        - save_cache:
            paths: [frontend/node_modules]
            key: scan-frontend
  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [scan-backend]
        - run:
            name: back-end scan
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical # Do not use the --force option along with the command below in your local 
              

        - save_cache:
            paths: [frontend/node_modules]
            key: scan-frontend
        - slack/notify:
            channel: $SLACK_DEFAULT_CHANNEL
            event: fail
            template: basic_fail_1
  
# Infrastructure deployment
#   deploy-infrastructure:
#       docker:
#         - image: amazon/aws-cli
#       steps:
#         - checkout
#         - run:
#             name: Install tar utility
#             command: |
#               yum install -y tar gzip
#         - run:
#             name: Ensure backend infrastructure exists
#             command: |
#               aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
#         - run:
#             name: Ensure front-end infrastructure exists
#             command: |
#               aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
#         - run:
#             name: Add backend ip to ansible inventory
#             command: |
#               aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:project, Values=udapeople" \
#               --output text >> .circleci/ansible/inventory.txt
#               cat .circleci/ansible/inventory.txt
              
#         - persist_to_workspace:
#             root: ~/
#             paths:
#               - project/.circleci/ansible/inventory.txt
#         - destroy-environment
      
# # configure infrastructure
#   configure-infrastructure:
#     docker:
#       - image: python:3.8.2-alpine
#     steps: 
#       - checkout
    
#       - add_ssh_keys:
#           fingerprints:

#             - "c"

#       - run:
#           name: "Install ansible"
#           command: |
#             apk add --update ansible
      
#       - attach_workspace:
#           at: ~/

#       - run:
#           name: "Run ansible playbook"
#           command: |
#             cd .circleci/ansible
#             ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment


#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run: 
#           name: Install curl
#           command: |
#             sudo apt-get install curl -y
#       - run: 
#           name: Install awscli
#           command: |
#             sudo apt-get update && sudo apt-get install -yy less
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run: 
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#             cat migrations_dump.txt
#       - run: 
#           name: Send migration results to kvdb.io
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#               curl --insecure https://kvdb.io/Y7Tx1uUb6z96Jg8jA6oWZ6/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
#       - destroy-environment
#       - revert-migrations


  
#   deploy-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout

#       - attach_workspace:
#           at: ~/
#       - run: 
#           name: Install dependencies
#           command: |
#             sudo apt-get update && sudo apt-get install python -y
#             sudo apt-get -qq install awscli
 
#       - run: 
#           name: Get backend url
#           command: |
#             export BACKEND_IP=$( aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "API_URL = ${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run: 
#           name: baking backend ip
#           command: |
#             cd frontend
#             npm i
#             npm run build
          
#       - run: 
#           name: Deploy frontend objects
#           command: |
#               cd frontend
#               npm install
#               npm run build
#               aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        
#       - destroy-environment

#   deploy-backend:
#     docker:
#       - image: cimg/python:3.10.4
#     steps:
#       - checkout
      
#       - add_ssh_keys:
#           fingerprints:
#             - "21:f8:d9:45:f3:51:1c:eb:75:42:01:5d:cd:59:8b:e9"
      
#       - attach_workspace:
#           at: ~/
        
#       - run:
#           name: "Install dependencies"
#           command: |
#             sudo apt-get update
#             sudo apt-get install awscli
#             sudo apt install python3-pip
#             pip3 --version
#             sudo python3 -m pip install ansible
#             sudo apt install rsync -y
      
#       - run: 
#           name: "Install Nodejs"
#           command: |
#             sudo apt-get update
#             curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash - 
#             sudo apt-get install -y nodejs
#             node --version
#             npm --version   
#       - run:
#           name: "Deploy backend"
#           command: |
#             cd backend
#             npm i
#             npm run build
#             cd ../.circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       - destroy-environment  
#       - revert-migrations

#   smoke-test:
#     docker: 
#       - image: python:3.7-alpine3.11
#     steps:  
#       - checkout
#       - run: 
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             pip install awscli
#             pip install nodejs
#             pip install npm
#       - run: 
#           name: Backend smoke test
#           command: |
#             export BACKEND_IP=$( aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
#             echo "$BACKEND_IP"
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             if curl "${API_URL}/api/status" | grep "ok" 
#             then
#               return 0
#             else
#               return 1
#             fi
      
#       - run: 
#           name: Frontend smoke test
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
#             echo ${URL}
#             if curl -s ${URL} | grep "Welcome"
#             then
#               return 0
#             else
#               return 1
#             fi
#       - destroy-environment  
#       - revert-migrations

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run: 
#           name: Install dependencies
#           command: yum install -y tar gzip nodejs npm
#       - run: 
#           name: Update cloudfront distribution
#           command: |
#             export OldWorkflowID=$(aws cloudformation \
#               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#               --no-paginate --output text)
#             echo $OldWorkflowID >> ~/OldWorkflowID.txt
#             cat ~/OldWorkflowID.txt
            
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --stack-name InitialStack \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
            
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - destroy-environment  
#       - revert-migrations
  
#   cleanup:
#     docker: 
#       - image: amazon/aws-cli
#     steps:
#       - run:
#           name: Get old stack workflow id
#           command: |
#             export OldWorkflowID=$(aws cloudformation \
#               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#               --no-paginate --output text)
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#             # Fetch the stack names          
#             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             echo Stack names: "${STACKS[@]}" 
#             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
#             then
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#             else
#               echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
#             fi
workflows:
  udapeople_app_workflow:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          context: slack_secrets
          requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     context: slack_context
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]